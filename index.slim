---
layout: slide
title: Simple API Stack
---

section.center
  h1 👋

section.center
  img.inline src="images/me-pixel.png"

section.center
  p: a(href="http://gsamokovarov.com") @gsamokovarov

section.center
  h2 Evening!

section.center
  p WELCOME TO RUBY
  img.inline src="images/shit-logo.png"

section.center data-background="#000"
  p Let me address this first.

section.center data-background="#000"
  p Many of you have said things about our logo.

section.center data-background="#000"
  p And I don't mean nice things. 🙊

section.center
  p Okay, so it does look a bit like shit. <span class="fragment">💩</span>

section.center
  p A bit. Okay?
  img.inline src="images/shit.png"

section.center
  p A lot. Okay!
  img.inline src="images/shit-pixels.png"

section.center data-background="#000"
  h1 🤔

section.center data-background="#000"
  p But what is the Banitsa anyway?

section.center data-background="#000"
  p Isn't it what it eventually turns into?

section.center data-background="#000"
  h1 🤔

section.center
  img.inline src="images/shit-pixels.png"

section.center data-background="#F00"
  p So, we have a new logo now.

section.center data-background="#F00"
  p I guess...

section.center
  img.inline src="images/new-logo.png"

section.center data-background="#F00"
  p YOU ARE WELCOME!

section.center data-background="#F00"
section.center data-background="#00F"
  p Anyway...

section.center data-background="#000"
  img.inline src="images/partial.svg"
  p September 22-23

section
  h2 partial :: Conf

  ul
    li Functional conference in Sofia, Bulgaria
    li Long lectures with a half-day of trainings
    li A broader scope than a single technology
    li Interesting and fun<span class="fragment">, we hope</span>

section.center
  <a href="http://partialconf.com">partial :: Conf</a>

section.center
  <a href="https://twitter.com/partialconf">@partialconf</a>

section.center
  p Open <a href="http://partialconf.com#apply">Call for Speakers</a>! 📈

section.center data-background="#00F"
  p You can help us by spreading the word!

section.center data-background="#00F"
  p Follow us on twitter.

section.center data-background="#00F"
  p Make your friends go.

section.center data-background="#00F"
  p Make your non-friends go.

section.center data-background="#00F"
  p Make some noise online.

section.center data-background="#00F"
  p Make some noise inline.

section.center data-background="#F00"
  p That (inline) doesn't make no sense!

section.center data-background="#F00"
  p What does make sense is the noise though.

section.center data-background="#F00"
  p Every single bit of it will help.

section.center data-background="#F00"
  h1 🙇

section.center data-background="#F00"
section.center data-background="#000"
section.center data-background="#000"
  h2 Simple API Stack

section
  h2 Rails API Mode
  p Since 5.0 we have an API friendly mode.

section
  h2 Rails API Mode
  p This doesn't mean that Rails pre 5.0 sucks for APIs.

section
  h2 Rails API Mode
  p It does not.

section
  h2 Rails API Mode
  p It's fine.

section
  h2 Rails API Mode
  p The API mode does a few things.

section
  h2 Rails API Mode
  p Cuts the internal middleware stack.

section
  h2 Rails API Mode
  p Introduces a bit slimmer ActionController::Base.

section
  h2 Rails API Mode
  p Introduces ActionController::API.

section
  h2 Rails API Mode
  p Introduces API friendly development errors.

section.center
  <a href="http://edgeguides.rubyonrails.org/api_app.html">MORE</a>

section.center data-background="#000"
  p All of this can be backported pre Rails 5.0

section.center data-background="#000"
  p 5.0 acknowledges a default API stack.

section.center data-background="#000"
  h1 🎪

section.center
  h1 🤔

section.center
  p What makes a good API?

section.center
  p What makes a good RESTful API?

section.center data-background="#F00"
  p Good resources.

section.center data-background="#F00"
  p Semantic responses.

section.center data-background="#F00"
  p Consistent responses.

section.center data-background="#F00"
  p Consistent error responses.

section.center data-background="#000"
  h2 Responses (JSON)

section
  h2 Responses
  p We have a couple of options.

section
  h2 JBuilder
  p Renders Action View templates (views) as JSON instead of HTML.

section.center
  pre: code.ruby contenteditable=true
    '
      # app/views/messages/show.json.jbuilder
      json.content format_content(@message.content)
      json.(@message, :created_at, :updated_at)

      json.author do
        json.name @message.creator.name.familiar
        json.email_address @message.creator.email_address_with_name
        json.url url_for(@message.creator, format: :json)
      end

      if current_user.admin?
        json.visitors calculate_visitors(@message)
      end

      json.comments @message.comments, :content, :created_at

      json.attachments @message.attachments do |attachment|
        json.filename attachment.filename
        json.url url_for(attachment)
      end

section.center
  pre: code.json contenteditable=true
    '
      {
        "content": "&lt;p&gt;This is &lt;i&gt;serious&lt;/i&gt; monkey business&lt;/p&gt;",
        "created_at": "2011-10-29T20:45:28-05:00",
        "updated_at": "2011-10-29T20:45:28-05:00",

        "author": {
          "name": "David H.",
          "email_address": "'David Heinemeier Hansson' <david@heinemeierhansson.com>",
          "url": "http://example.com/users/1-david.json"
        },

        "visitors": 15,

        "comments": [
          { "content": "Hello everyone!", "created_at": "2011-10-29T20:45:28-05:00" },
          { "content": "To you my good sir!", "created_at": "2011-10-29T20:47:28-05:00" }
        ],

        "attachments": [
          { "filename": "forecast.xls", "url": "http://example.com/downloads/forecast.xls" },
          { "filename": "presentation.pdf", "url": "http://example.com/downloads/presentation.pdf" }
        ]
      }

section
  h2 JBuilder
  p This is the default API mode option.

section.center data-background="#000"
  p Too much DSL for my taste.

section.center data-background="#000"
  p Even if you like the DSL, the logic feel like it's in one big bag.

section.center data-background="#000"
  p Can be abstracted with partial views, but I like methods.

section
  h2 Active Model Serializers
  p Renders a canonical representation of an object as JSON.

section
  h2 Active Model Serializers
  p No templates, simple Ruby classes are used instead.

section.center
  pre: code.ruby contenteditable=true
    '
      class SomeSerializer < ActiveModel::Serializer
        attribute :title, key: :name
        attributes :body

        def body
          object.strip
        end
      end

section.center
  pre: code.json contenteditable=true
    '
      {
        "name": "Some",
        "body": "I smell something 🤔."
      }

section.center data-background="#0F0"
  p I like the concept of the serializers.

section.center data-background="#0F0"
  p Separates the view logic.

section.center data-background="#0F0"
  p Testable without specialized tools.

section.center data-background="#0F0"
  p Simple

section.center data-background="#000"
  h2 Simple API Stack

section.center data-background="#F00"
  p It's kinda huge.

section.center data-background="#F00"
  p Bring runtime dependencies.

section.center data-background="#F00"
  p Supports jsonapi!

section.center data-background="#0F0"
  p But what if you don't need jsonapi?

section.center data-background="#F00"
section.center data-background="#F00"
  p Requires an interface for the serializable objects.

section.center
  pre: code.ruby contenteditable=true
    '
      class SomeResource < ActiveRecord::Base
        # columns: title, body
      end

section.center
  pre: code.ruby contenteditable=true
    '
      class SomeResource < ActiveModelSerializers::Model
        attributes :title, :body
      end

section.center
  h1 😓

section.center data-background="#000"
  h2 serializr

section.center
  h2 <a href="https://github.com/gsamokovarov/serializr">serializr</a>

section
  h2 Serializr
  p A lightweight alternative to AMS.

section
  h2 Serializr
  p No interface restrictions for the serializable objects.

section
  h2 Serializr
  p A minimal interface on the library side.

section.center
  pre: code.ruby contenteditable=true
    '
      # app/serializers/user_serializer.rb
      class UserSerializer < Serializr
        attributes :id, :name, :email

        def name
          object.first_name + " " + object.last_name
        end
      end

section.center
  pre: code.json contenteditable=true
    '
      {
        "id": 42,
        "name": "Doe John",
        "email": "john@nsa.gov"
      }

section
  h2 Serializr
  p Integration with ActionController

section.center
  pre: code.ruby contenteditable=true
    '
      class UsersController < ApplicationController
        def show
          user = User.find(params[:id])

          render json: user
        end
      end

section.center
  pre: code.ruby contenteditable=true
    '
      class UsersController < ApplicationController
        def show
          user = User.find(params[:id])

          render json: user, serializer: UserSerializer
        end
      end

section.center
  pre: code.ruby contenteditable=true
    '
      class FriendsController < ApplicationController
        def index
          friends = User.friends_of(params[:id])

          render json: friends
        end
      end

section.center
  pre: code.ruby contenteditable=true
    '
      class FriendsController < ApplicationController
        def index
          friends = User.friends_of(params[:id])

          render json: friends, serializer: UserSerializer[]
        end
      end

section
  h2 Serializr
  p A minimal interface on the library side.

section
  h2 Serializr
  p This means no has_one, has_many, etc. class macros.

section
  h2 Serializr
  p Quite easy to support.

section.center
  pre: code.ruby contenteditable=true
    '
      # app/serializers/application_serializer.rb
      class ApplicationSerializer < Serializr
        inlcude Rails.application.routes.url_helpers

        cattr_reader :serializer_class_cache do
          Hash.new do |hash, cls|
            hash[cls] = (cls.name + Serializer).constantize
          end
        end

        def render_one(object, serializer: nil)
          return unless object

          serializer ||= serializer_class_cache[object.class]
          serializer.new(object)
        end

        def render_many(objects, serializer: nil)
          return [] if objects.blank?

          serializer ||= serializer_class_cache[objects.first.class][]
          serializer.new(objects)
        end
      end

section.center
  h1 👆

section.center
  h1 ✌️

section.center data-background="#000"
  h2 Error Responses (JSON)

section.center
  p Choose a format and stick with it!

section data-background="#000"
  h2 Ideas
  ul
    li.fragment No string messages
    li.fragment Field errors with error details
    li.fragment CONSISTENCY

section.center data-background="#000"
  p Being an API, you have one great constraint.

section.center data-background="#F00"
  p You're not the one to worry about presenting the errors.

section.center data-background="#F00"
  p Only providing them.

section.center data-background="#000"
  p Which means, we can treat all the errors the same.

section.center
  h1 👆

section.center
  p Let your application crash.

section.center
  h1 ✌️

section.center
  p Catch it and render the response.

section.center
  h1 🍻

section.center
  p Enjoy your substance of choice<span class="fragment">, moderately!</span>

section.center
  pre: code.ruby contenteditable=true
    '
      ActionController::API.rescue_from

section.center
  pre: code.ruby contenteditable=true
    '
      ActionController::Base.rescue_from

section.center
  h1 👓

section.center
section.center
  h1 🕶
